environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\Shinelon\\AppData\\Roaming', 'BUILDLAB': '10586.th2_release_sec.160422-1850', 'BUILDLABEX': '10586.306.amd64fre.th2_release_sec.160422-1850', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'DESKTOP-9IDM32E', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\Shinelon', 'LOCALAPPDATA': 'C:\\Users\\Shinelon\\AppData\\Local', 'LOGONSERVER': '\\\\DESKTOP-9IDM32E', 'NUMBER_OF_PROCESSORS': '4', 'ONEDRIVE': 'C:\\Users\\Shinelon\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'F:\\python2.7_x86;F:\\python2.7_x86\\Library\\mingw-w64\\bin;F:\\python2.7_x86\\Library\\usr\\bin;F:\\python2.7_x86\\Library\\bin;F:\\python2.7_x86\\Scripts;C:\\ProgramData\\Oracle\\Java\\javapath;D:\\python;D:\\python\\Library\\mingw-w64\\bin;D:\\python\\Library\\usr\\bin;D:\\python\\Library\\bin;D:\\python\\Scripts;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;E:\\Git\\cmd;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 94 Stepping 3, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '5e03', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'PYCHARM_HOSTED': '1', 'PYTHONIOENCODING': 'UTF-8', 'PYTHONPATH': 'D:\\PythonProject\\PythonEdit_V3.6\\BlackHat', 'PYTHONUNBUFFERED': '1', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\Shinelon\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\Shinelon\\AppData\\Local\\Temp', 'USERDOMAIN': 'DESKTOP-9IDM32E', 'USERDOMAIN_ROAMINGPROFILE': 'DESKTOP-9IDM32E', 'USERNAME': 'Shinelon', 'USERPROFILE': 'C:\\Users\\Shinelon', 'WINDIR': 'C:\\Windows'})